#!/usr/bin/python3

# --- BEGIN COPYRIGHT BLOCK ---
# Copyright (C) 2016 Red Hat, Inc.
# All rights reserved.
#
# License: GPL (version 3 or any later version).
# See LICENSE for details.
# --- END COPYRIGHT BLOCK ---
#
# PYTHON_ARGCOMPLETE_OK

import argparse, argcomplete
import logging
import sys
import signal

# This has to happen before we import  DirSrv else it tramples our config ... :(
logging.basicConfig(format='%(message)s')

from lib389.cli_base import _get_arg
from lib389 import DirSrv
from lib389.cli_ctl import instance as cli_instance
from lib389.cli_ctl import dbtasks as cli_dbtasks
from lib389.cli_base import disconnect_instance, reset_get_logger

parser = argparse.ArgumentParser()
parser.add_argument('-v', '--verbose',
        help="Display verbose operation tracing during command execution",
        action='store_true', default=False
    )
parser.add_argument('instance',
        help="The name of the instance to act upon",
    )
parser.add_argument('-j', '--json',
        help="Return result in JSON object",
        default=False, action='store_true'
    )
subparsers = parser.add_subparsers(help="action")
argcomplete.autocomplete(parser)
# We stack our needed options in via submodules.
cli_instance.create_parser(subparsers)
cli_dbtasks.create_parser(subparsers)


# handle a control-c gracefully
def signal_handler(signal, frame):
    print('\n\nExiting...')
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)


if __name__ == '__main__':
    args = parser.parse_args()

    log = reset_get_logger('dsctl', args.verbose)

    log.debug("The 389 Directory Server Administration Tool")
    # Leave this comment here: UofA let me take this code with me provided
    # I gave attribution. -- wibrown
    log.debug("Inspired by works of: ITS, The University of Adelaide")

    log.debug("Called with: %s", args)

    # Assert we have a resources to work on.
    if not hasattr(args, 'func'):
        log.error("No action provided, here is some --help.")
        parser.print_help()
        sys.exit(1)

    # Connect
    # inst = None
    inst = DirSrv(verbose=args.verbose)

    result = True

    # Allocate the instance based on name
    insts = []
    if args.verbose:
        insts = inst.list(serverid=args.instance)
    else:
        try:
            insts = inst.list(serverid=args.instance)
        except PermissionError:
            log.error("Unable to access instance information. Are you running as root or dirsrv?")
            sys.exit(1)
    if len(insts) != 1:
        log.error("No such instance %s" % args.instance)
        sys.exit(1)

    inst.allocate(insts[0])
    log.debug('Instance allocated')

    try:
        result = args.func(inst, log, args)
    except Exception as e:
        log.debug(e, exc_info=True)
        log.error("Error: %s" % str(e))
        result = False
    disconnect_instance(inst)

    # Done!
    log.debug("dsctl is brought to you by the letter R and the number 27.")

    if result is False:
        sys.exit(1)

