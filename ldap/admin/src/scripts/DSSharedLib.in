libpath_add()
{
    [ -z "$1" ] && return
    LD_LIBRARY_PATH=${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$1
}

#
#  get_server_id()
#
#  First grab all the server instances
#  Then check if a server id was provided, if not, set
#  the server id if there is only one instance. 
#  If a servid was provided, make sure its a valid instance name.
#
get_server_id()
{
    dir=$1
    servid=$2
    first="yes"
    inst_count=0
    instances="<none>"
    rc=0

    # convert
    # uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),.....
    # to
    # 0
    # this is the only portable, secure way to determine the id number
    userid=`id | awk -F'[=(]+' '{print $2}'`
    if [ "$userid" -ne 0 ] ; then
        # magic - see start-dirsrv, DSCreate.pm::get_initconfigdir, etc.
        dir=$HOME/.@package_name@
    fi
    if [ -n "$INITCONFIGDIR" ] ; then
        dir=$INITCONFIGDIR
    fi

    # look first in user provided INITCONFIGDIR, then in the system/build location,
    # then in the users home dir - cases
    # 1. system install but running as non-root user
    #    in this case, we want to use the instance from $dir - it will
    #    fallback to $homedir in that case, and if that is a problem, the user will
    #    just have to temporarily move $homedir/dirsrv-sysinstancename out of the way
    #    while working on the system instance
    # 2. prefix/non-system install
    #    in this case, we want to use $homedir - if for some reason there is a system
    #    instance in $dir with the same name, the user can use INITCONFIGDIR to
    #    override that and force the use of the one from $homedir
    for i in `ls $dir/@package_name@-* 2>/dev/null`
    do
        if [ $i != "$dir/@package_name@-admin" ]
        then
            inst_count=`expr $inst_count + 1`
            id=$(expr "$i" : ".*@package_name@-\([^)]*\).*")
            if  [ $first == "yes" ]
            then
                instances=$id
                first="no"
            else
                instances=$instances", $id"
            fi
            name=$id
        fi
    done

    if [ -z $servid ]
    then
        # server id not provided, check if there is only one instance
        if [ $inst_count -eq 1 ]
        then
            servid=$name
        else 
            # multiple instances, can not set server id.  Return list of instances
            servid=$instances
            rc=1;
        fi
    elif [ $servid == slapd-* ]
    then
        servid=`echo "$servid" | sed -e 's/slapd-//'`
    elif [ $servid == @package_name@-* ]
    then
        servid=`echo "$servid" | sed -e 's/@package_name@-//'`
    fi
    if ! [ -a "$dir/@package_name@-$servid" ]
    then
        # invalid instance name, return the "valid" instance names
        servid=$instances
        rc=1
    fi

    echo $servid
    exit $rc
}

#
#
#
process_dse ()
{
    servid=$1
    pid=$2
    file="@instconfigdir@/slapd-$servid/dse.ldif"
    shopt -s nocasematch
    OLD_IFC=$IFC
    IFS=""
    while read -r LINE
    do
        if [[ $LINE !=  \ * ]] && [ "$output" != "" ]
        then
            echo "$output" >> /tmp/DSSharedLib.$pid
            output=""
        fi
        if [ "$output" != "" ] && [[ $LINE == \ * ]]
        then
            # continuation line, strip the space and append it
            LINE=`echo "$LINE" | sed -e 's/^ //'`
            output=$output$LINE
        elif [[ $LINE == nsslapd-port* ]]
        then
            output=$LINE;
        elif [[ $LINE == nsslapd-localhost* ]]
        then
            output=$LINE;
        elif [[ $LINE == nsslapd-securePort* ]]
        then
            output=$LINE;
        elif [[ $LINE == nsslapd-security* ]]
        then
            output=$LINE;
        elif [[ $LINE == nsslapd-ldapilisten* ]]
        then
            output=$LINE;
        elif [[ $LINE == nsslapd-ldapifilepath* ]]
        then
            output=$LINE;
        elif [[ $LINE == nsslapd-rootdn* ]]
        then
            output=$LINE;
        elif [[ $LINE == nsslapd-ldapiautobind* ]]
        then
            output=$LINE;
        elif [[ $LINE == nsslapd-certdir* ]]
        then
            output=$LINE;
        fi
    
    done < $file

    IFS=$OLD_IFS
}

#
# Check protocol
#
check_protocol ()
{
    protocol=$1
    security=$2
    ldapi=$3
    openldap=$4
       
    if [ "$protocol" == "LDAPI" ] && [ "$openldap" != "yes" ]; then
        echo ""
        exit
    elif [ "$protocol" == "LDAPI" ] && [ "$ldapi" == "off" ]; then
        echo ""
        exit
    elif [ "$protocol" == "STARTTLS" ]; then
        if [ "$security" == "" ] || [ "$security" == "off" ]; then
            echo ""
            exit
        fi
    elif [ "$protocol" == "LDAPS" ]; then
        if [ "$security" == "" ] || [ "$security" == "off" ]; then
            echo ""
            exit
        fi
    fi
    
    if [ "$protocol" != "" ]; then
        if [ "$protocol" != "STARTTLS" ] && 
           [ "$protocol" != "LDAPS" ] &&
           [ "$protocol" != "LDAPI" ] && 
           [ "$protocol" != "LDAP" ]
        then
            echo ""
            exit
        fi
    fi

    echo "$protocol"
}