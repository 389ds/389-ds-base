#!@perlexec@
#
# BEGIN COPYRIGHT BLOCK
# Copyright (C) 2001 Sun Microsystems, Inc. Used by permission.
# Copyright (C) 2013 Red Hat, Inc.
# All rights reserved.
#
# License: GPL (version 3 or any later version).
# See LICENSE for details. 
# END COPYRIGHT BLOCK
#

use lib qw(@perlpath@);
use DSUtil;

DSUtil::libpath_add("@nss_libdir@");
DSUtil::libpath_add("/usr/lib");
DSUtil::libpath_add("/usr/lib64");
$ENV{'PATH'} = "@ldaptool_bindir@:/usr/bin:/usr/lib64/mozldap/";
$ENV{'SHLIB_PATH'} = "$ENV{'LD_LIBRARY_PATH'}";

$i = 0;

sub usage {
    print(STDERR "Usage: cleanallruv.pl [-v] [-Z serverID] [-D rootdn] { -w password | -w - | -j filename }\n");
    print(STDERR "                      -b basedn -r rid  [-A] [-P protocol] [-h]\n");
    print(STDERR "Options:\n");
    print(STDERR "        -D rootdn    - Directory Manager\n");
    print(STDERR "        -w password  - Directory Manager's password\n");
    print(STDERR "        -w -         - Prompt for Directory Manager's password\n");
    print(STDERR "        -Z serverID  - Server instance identifier\n");
    print(STDERR "        -j filename  - Read Directory Manager's password from file\n");
    print(STDERR "        -b basedn    - DN of the replica root you want to clean\n");
    print(STDERR "        -r rid       - The replica id that you want to clean\n");
    print(STDERR "        -A           - Abort an existing cleanallruv task(must use with -b and -r args\n");
    print(STDERR "        -P protocol  - STARTTLS, LDAPS, LDAPI, LDAP (default: uses most secure protocol available)\n");
    print(STDERR "        -v           - Verbose output\n");
    print(STDERR "        -h           - Display usage\n");
}

while ($i <= $#ARGV) 
{
    if ("$ARGV[$i]" eq "-b"){
        # Base DN
        $i++; $basedn = $ARGV[$i];
    } elsif ("$ARGV[$i]" eq "-r"){
        # rid
        $i++; $rid = $ARGV[$i];
    } elsif ("$ARGV[$i]" eq "-A"){
        # abort
        $abort = "yes";
    } elsif ("$ARGV[$i]" eq "-D"){    
        # Directory Manager
        $i++; $rootdn = $ARGV[$i];
    } elsif ("$ARGV[$i]" eq "-w"){    
        # Directory Manager's password
        $i++; $passwd = $ARGV[$i];
    } elsif ("$ARGV[$i]" eq "-j"){
        # Read Directory Manager's password from a file
        $i++; $passwdfile = $ARGV[$i];
    } elsif ("$ARGV[$i]" eq "-Z"){
        # server instance identifer
        $i++; $servid = $ARGV[$i];
    } elsif ("$ARGV[$i]" eq "-P"){ 
        # protocol preference
        $i++; $protocol = $ARGV[$i];
    } elsif ("$ARGV[$i]" eq "-v"){    
        # verbose
        $verbose = 1;
    } elsif ("$ARGV[$i]" eq "-h"){    
        # help
        &usage; exit(0);
    } else {
        print "ERROR - Unknown option: $ARGV[$i]\n";
        &usage; exit(1);
    }
    $i++;
}

#
# Gather all our config settings
#
($servid, $confdir) = DSUtil::get_server_id($servid, "@initconfigdir@");
%info = DSUtil::get_info($confdir, $host, $port, $rootdn);
$info{rootdnpw} = DSUtil::get_password_from_file($passwd, $passwdfile);
$info{protocol} = $protocol;
if ($verbose == 1){
    $info{args} = "-v -a";
} else {
    $info{args} = "-a";
}
if ($basedn eq "" || $rid eq ""){ 
    &usage; 
    exit(1); 
}

#
# Construct the task entry
#
($s, $m, $h, $dy, $mn, $yr, $wdy, $ydy, $r) = localtime(time);
$mn++; $yr += 1900;
if($abort eq ""){
    # Build the task entry to add
    $taskname = "cleanallruv_${yr}_${mn}_${dy}_${h}_${m}_${s}";
    $dn = "dn: cn=$taskname, cn=cleanallruv, cn=tasks, cn=config\n";
} else {
    $taskname = "abort_cleanallruv_${yr}_${mn}_${dy}_${h}_${m}_${s}";
    $dn = "dn: cn=$taskname, cn=abort cleanallruv, cn=tasks, cn=config\n";
}    
$misc =   "objectclass: top\nobjectclass: extensibleObject\n";
$cn =     "cn: $taskname\n";
$basedn = "replica-base-dn: $basedn\n";
$rid =    "replica-id: $rid\n";
$entry = "${dn}${misc}${cn}${basedn}${rid}";

$rc = DSUtil::ldapmod($entry, %info);

$dn =~ s/^dn: //;
$dn =~ s/\n//;
if($rc == 0){
    print "Successfully added task entry \"$dn\"\n";
} else {
    print "Failed to add task entry \"$dn\" error ($rc)\n";
}

exit($rc);
