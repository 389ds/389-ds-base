# BEGIN COPYRIGHT BLOCK
# This Program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; version 2 of the License.
# 
# This Program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with
# this Program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA 02111-1307 USA.
# 
# In addition, as a special exception, Red Hat, Inc. gives You the additional
# right to link the code of this Program with code not covered under the GNU
# General Public License ("Non-GPL Code") and to distribute linked combinations
# including the two, subject to the limitations in this paragraph. Non-GPL Code
# permitted under this exception must only link to the code of this Program
# through those well defined interfaces identified in the file named EXCEPTION
# found in the source code files (the "Approved Interfaces"). The files of
# Non-GPL Code may instantiate templates or use macros or inline functions from
# the Approved Interfaces without causing the resulting work to be covered by
# the GNU General Public License. Only Red Hat, Inc. may make changes or
# additions to the list of Approved Interfaces. You must obey the GNU General
# Public License in all respects for all of the Program code and other code used
# in conjunction with the Program except the Non-GPL Code covered by this
# exception. If you modify this file, you may extend this exception to your
# version of the file, but you are not obligated to do so. If you do not wish to
# provide this exception without modification, you must delete this exception
# statement from your version and license this file solely under the GPL without
# exception. 
# 
# 
# Copyright (C) 2007 Red Hat, Inc.
# All rights reserved.
# END COPYRIGHT BLOCK
#

###########################
#
# This perl module provides a way to set up a new installation after
# the binaries have already been extracted.  This is typically after
# using native packaging support to install the package e.g. RPM,
# pkgadd, depot, etc.  This script will show the license, readme,
# dsktune, then run the usual setup pre and post installers.
#
##########################

package Setup;
use Exporter ();
@ISA       = qw(Exporter);
@EXPORT    = qw($SILENT $EXPRESS $TYPICAL $CUSTOM);
@EXPORT_OK = qw($SILENT $EXPRESS $TYPICAL $CUSTOM);

# tempfiles
use File::Temp qw(tempfile tempdir);

# hostname
use Net::Domain qw(hostfqdn);

# load perldap
use Mozilla::LDAP::Conn;
use Mozilla::LDAP::Utils qw(normalizeDN);
use Mozilla::LDAP::API qw(ldap_explode_dn);
use Mozilla::LDAP::LDIF;

use Getopt::Long;

use File::Temp qw(tempfile tempdir);

use SetupLog;

# the setup types
$EXPRESS = 1;
$TYPICAL = 2;
$CUSTOM = 3;
$SILENT = 4;

# process command line options
Getopt::Long::Configure(qw(bundling)); # bundling allows -ddddd

sub VersionMessage {
    print "@capbrand@ Directory Server Setup Program Version @PACKAGE_VERSION@\n";
}

sub HelpMessage {
    print <<EOF;
Usage: $0 [--options] -- [args]
options:
    --help       This message
    --version    Print the version and exit
    --debug      Turn on debugging
    --silent     Use silent setup - no user input
    --file=name  Use the file 'name' in .inf format to supply the default answers
    --keepcache  Do not delete the temporary .inf file generated by this program
    --logfile    Log setup messages to this file - otherwise, a temp file will be used
For all options, you can also use the short name e.g. -h, -d, etc.  For the -d argument,
specifying it more than once will increase the debug level e.g. -ddddd

args:
You can supply default .inf data in this format:
    section.param=value
e.g.
    General.FullMachineName=foo.example.com
or
    "slapd.Suffix=dc=example, dc=com"
Values passed in this manner will override values in an .inf file given with the -f argument.
EOF
}

sub new {
    my $type = shift;
    my $self = {};
    my ($debuglevel, $silent, $inffile, $keep, $preonly, $logfile);
    my @otherargs;

    GetOptions('help|h|?' => sub { VersionMessage(); HelpMessage(); exit 0 },
               'version|v' => sub { VersionMessage(); exit 0 },
               'debug|d+' => \$debuglevel,
               'silent|s' => \$silent,
               'file|f=s' => \$inffile,
               'keepcache|k' => \$keep,
               'preonly|p' => \$preonly,
               'logfile|l=s' => \$logfile
               );

    $self->{debuglevel} = $debuglevel;
    $self->{silent} = $silent;
    $self->{inffile} = $inffile;
    $self->{keep} = $keep;
    $self->{preonly} = $preonly;
    $self->{logfile} = $logfile;
    $self->{log} = new SetupLog($self->{logfile});
    if (!$self->{inffile}) {
        my ($fh, $filename) = tempfile("setupXXXXXX", UNLINK => !$keep,
                                       SUFFIX => ".inf", OPEN => 0,
                                       DIR => File::Spec->tmpdir);
        $self->{inffile} = $filename;
        $self->{inf} = new Inf;
        $self->{inf}->{filename} = $self->{inffile};
    } else {
        $self->{inf} = new Inf($self->{inffile});
        $self->{keep} = 1; # do not delete user supplied inf file
    }

    # see if user passed in default inf values - also, command line
    # arguments override those passed in via an inf file - this
    # allows the reuse of .inf files with some parameters overridden
    for (@ARGV) {
        if (/^(\w+).(\w+)=(.*)$/) { # e.g. section.param=value
            $self->{inf}->{$1}->{$2} = $3;
        } else { # error
            print STDERR "Error: unknown command line option $_\n";
            usage();
            exit 1;
        }
    }

    $self->{configdir} = $ENV{DS_CONFIG_DIR} || "@instconfigdir@";

    $self = bless $self, $type;
    return $self;
}

# log only goes the the logfile
sub log {
    my $self = shift;
    my $level = shift;
    $self->{log}->logMessage($level, "Setup", @_);
}

# msg does to the screen and optionally to the log file
# if you use msg like this:
# msg(0, "some message")
# it will go only to the screen
# if you use msg like this:
# msg($WARN, "some message")
# it will go to the screen and to the log at the $WARN level
sub msg {
    my $self = shift;
    my $level = shift;
    my @text = @_;
    if (!$level && @text) {
        # e.g. msg(0, "string") - no logging
    } elsif ($level and @text and grep {/^$level$/} $self->{log}->levels()) {
        # e.g. msg($WARN, "string") - print and log
    } else {
        # log at default INFO level
        unshift @text, $level;
        $level = $INFO;
    }
    if ($level) {
        $self->log($level, @text);
    }
    print @text;
}

sub doExit {
    my $self = shift;
    $self->msg($FATAL, "Exiting . . .\n");
    $self->msg("Log file is " . $self->{log}->{filename} . "\n");
	exit 1;
}

#############################################################################
# Mandatory TRUE return value.
#
1;
