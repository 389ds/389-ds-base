#!@perlexec@
#
# BEGIN COPYRIGHT BLOCK
# This Program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; version 2 of the License.
# 
# This Program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with
# this Program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA 02111-1307 USA.
# 
# In addition, as a special exception, Red Hat, Inc. gives You the additional
# right to link the code of this Program with code not covered under the GNU
# General Public License ("Non-GPL Code") and to distribute linked combinations
# including the two, subject to the limitations in this paragraph. Non-GPL Code
# permitted under this exception must only link to the code of this Program
# through those well defined interfaces identified in the file named EXCEPTION
# found in the source code files (the "Approved Interfaces"). The files of
# Non-GPL Code may instantiate templates or use macros or inline functions from
# the Approved Interfaces without causing the resulting work to be covered by
# the GNU General Public License. Only Red Hat, Inc. may make changes or
# additions to the list of Approved Interfaces. You must obey the GNU General
# Public License in all respects for all of the Program code and other code used
# in conjunction with the Program except the Non-GPL Code covered by this
# exception. If you modify this file, you may extend this exception to your
# version of the file, but you are not obligated to do so. If you do not wish to
# provide this exception without modification, you must delete this exception
# statement from your version and license this file solely under the GPL without
# exception. 
# 
# 
# Copyright (C) 2001 Sun Microsystems, Inc. Used by permission.
# Copyright (C) 2013 Red Hat, Inc.
# All rights reserved.
# END COPYRIGHT BLOCK
#

use lib qw(@perlpath@);
use DSUtil;
use Getopt::Std;

DSUtil::libpath_add("@nss_libdir@");
DSUtil::libpath_add("/usr/lib");
DSUtil::libpath_add("/usr/lib64");
$ENV{'PATH'} = "@ldaptool_bindir@:/usr/bin:/usr/lib64/mozldap/";
$ENV{'SHLIB_PATH'} = "$ENV{'LD_LIBRARY_PATH'}";

$i = 0;
$attr_count = 0;
$vlv_count = 0;

sub usage {
    print(STDERR "Usage: db2index.pl [-Z serverID] [-D rootdn] { -w password | -w - | -j filename } [-P protocol]\n");
    print(STDERR "                   -n backendname [-t attributeName[:indextypes[:matchingrules]]] [-T vlvTag] [-v] [-h]\n");
    print(STDERR "Options:\n");
    print(STDERR "        -D rootdn       - Directory Manager\n");
    print(STDERR "        -w password     - Directory Manager's password\n");
    print(STDERR "        -w -            - Prompt for Directory Manager's password\n");
    print(STDERR "        -j filename     - Read Directory Manager's password from file\n");
    print(STDERR "        -Z serverID     - Server instance identifer\n");
    print(STDERR "        -n backendname  - Backend database name.  Example: userRoot\n");
    print(STDERR "        -t attributeName[:indextypes[:matchingrules]]\n");
    print(STDERR "                        - attributeName: name of the attribute to be indexed\n");
    print(STDERR "                          If omitted, all the indexes defined for that instance are generated.\n");
    print(STDERR "                        - indextypes: comma separated index types\n");
    print(STDERR "                        - matchingrules: comma separated matrules\n");
    print(STDERR "                              Example: -t foo:eq,pres\n");
    print(STDERR "        -T vlvTag       - VLV index name\n");
    print(STDERR "        -P protocol     - STARTTLS, LDAPS, LDAPI, LDAP (default: uses most secure protocol available)\n");
    print(STDERR "        -v              - Verbose\n");
    print(STDERR "        -h              - Display usage\n");
}

while ($i <= $#ARGV) {
    if ("$ARGV[$i]" eq "-t") {         # attribute
        $i++; $attr[$attr_count] = $ARGV[$i]; $attr_count++;
    } elsif ("$ARGV[$i]" eq "-T") {    # VLV index
        $i++; $vlv_attr[$vlv_count] = $ARGV[$i]; $vlv_count++;
    } elsif ("$ARGV[$i]" eq "-D") {    # Directory Manager
        $i++; $rootdn = $ARGV[$i];
    } elsif ("$ARGV[$i]" eq "-w") {    # Directory Manager's password
        $i++; $passwd = $ARGV[$i];
    } elsif ("$ARGV[$i]" eq "-j") {    # Read Directory Manager's password from a file
        $i++; $passwdfile = $ARGV[$i];
    } elsif ("$ARGV[$i]" eq "-n") {    # backend instance name
        $i++; $instance = $ARGV[$i];
    } elsif ("$ARGV[$i]" eq "-Z") {    # server instance name
        $i++; $servid = $ARGV[$i];
    } elsif ("$ARGV[$i]" eq "-P") {    # protocol preference
        $i++; $protocol = $ARGV[$i];
    } elsif ("$ARGV[$i]" eq "-h") {    # help
        &usage; exit(0);
    } elsif ("$ARGV[$i]" eq "-v") {    # verbose
        $verbose = 1;
    } else {
        &usage; exit(1);
    }
    $i++;
}

#
# Gather all our config settings
#
($servid, $confdir) = DSUtil::get_server_id($servid, "@initconfigdir@");
%info = DSUtil::get_info($confdir, $host, $port, $rootdn);
$info{rootdnpw} = DSUtil::get_password_from_file($passwd, $passwdfile);
$info{protocol} = $protocol;
if ($verbose){
    $info{args} = "-v -a";
} else {
    $info{args} = "-a";
}
if ($instance eq ""){ 
    &usage; 
    exit(1);
}

# 
# No attribute name has been specified: let's get them from the configuration
#
chdir("/usr/bin");
if ( $#attr == -1 && $#vlv_attr == -1 )
{
    # Get the list of indexes from the entry
    $info{base} = "cn=index,cn=\"$instance\", cn=ldbm database,cn=plugins,cn=config";
    $info{filter} = "(&(objectclass=*)(nsSystemIndex=false))";
    $info{scope} = "one";
    $info{attrs} = "cn";
    $info{srch_args} = $vstr;
    $indexes_list=DSUtil::ldapsrch(%info);
    
    # build the values of the attribute nsIndexAttribute
    open(LDAP1, "$indexes_list |");
    while (<LDAP1>){
        s/\n //g;
        if (/^cn: (.*)\n/) {
            $IndexAttribute="nsIndexAttribute";
            $attribute="$attribute$IndexAttribute: $1\n";
        }
    }
    close(LDAP1);
    if($? != 0){
        $ret=$?>>8;
        print(STDERR "Failed to search the server for indexes, error ($ret)\n");
        exit($ret);
    }
    if ( $attribute eq "" ){
        # No attribute to index, just exit
        print "Failed to add task entry - no attributes found for backend \"$instance\"\n";
        exit(1);
    }

    # Get the list of indexes from the entry
    $info{base} = "cn=\"$instance\",cn=ldbm database,cn=plugins,cn=config";
    $info{filter} = "objectclass=vlvIndex";
    $info{scope} = "sub";
    $info{attrs} = "cn";
    $info{srch_args} = $vstr;
    $vlvindexes_list=DSUtil::ldapsrch(%info);

    # build the values of the attribute nsIndexVlvAttribute
    open(LDAP1, "$vlvindexes_list |");
    while (<LDAP1>) {
        s/\n //g;
        if (/^cn: (.*)\n/) {
            $vlvIndexAttribute="nsIndexVlvAttribute";
            $vlvattribute="$vlvattribute$vlvIndexAttribute: $1\n";
        }
    }
    close(LDAP1);
    if($? != 0){
        $ret=$?>>8;
        print(STDERR "Failed to search the server for VLV indexes, error ($ret)\n");
        exit($ret);
    }
}
else
{
    foreach $arg (@attr){
        $attribute = $attribute . "nsIndexAttribute: $arg\n";
    }
    foreach $arg (@vlv_attr){
        $vlvattribute = $vlvattribute . "nsIndexVlvAttribute: $arg\n";
    }
}

# 
# Construct the task entry
#
($s, $m, $h, $dy, $mn, $yr, $wdy, $ydy, $r) = localtime(time);
$mn++; $yr += 1900;
$taskname = "db2index_${yr}_${mn}_${dy}_${h}_${m}_${s}";
$dn = "dn: cn=$taskname, cn=index, cn=tasks, cn=config\n";
$misc = "objectclass: top\nobjectclass: extensibleObject\n";
$cn =  "cn: $taskname\n";
$nsinstance = "nsInstance: ${instance}\n";
$entry = "${dn}${misc}${cn}${nsinstance}${attribute}${vlvattribute}";

$rc = DSUtil::ldapmod($entry, %info);

$dn =~ s/^dn: //;
$dn =~ s/\n//;
if($rc == 0){
    print "Successfully added task entry \"$dn\"\n";
} else {
    print "Failed to add task entry \"$dn\" error ($rc)\n";
}

exit($rc);
