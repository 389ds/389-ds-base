#!@perlexec@
#
# BEGIN COPYRIGHT BLOCK
# This Program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; version 2 of the License.
# 
# This Program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with
# this Program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA 02111-1307 USA.
# 
# In addition, as a special exception, Red Hat, Inc. gives You the additional
# right to link the code of this Program with code not covered under the GNU
# General Public License ("Non-GPL Code") and to distribute linked combinations
# including the two, subject to the limitations in this paragraph. Non-GPL Code
# permitted under this exception must only link to the code of this Program
# through those well defined interfaces identified in the file named EXCEPTION
# found in the source code files (the "Approved Interfaces"). The files of
# Non-GPL Code may instantiate templates or use macros or inline functions from
# the Approved Interfaces without causing the resulting work to be covered by
# the GNU General Public License. Only Red Hat, Inc. may make changes or
# additions to the list of Approved Interfaces. You must obey the GNU General
# Public License in all respects for all of the Program code and other code used
# in conjunction with the Program except the Non-GPL Code covered by this
# exception. If you modify this file, you may extend this exception to your
# version of the file, but you are not obligated to do so. If you do not wish to
# provide this exception without modification, you must delete this exception
# statement from your version and license this file solely under the GPL without
# exception. 
# 
# 
# Copyright (C) 2001 Sun Microsystems, Inc. Used by permission.
# Copyright (C) 2013 Red Hat, Inc.
# All rights reserved.
# END COPYRIGHT BLOCK
#

use lib qw(@perlpath@);
use DSUtil;
use Getopt::Std;

sub usage {
    print(STDERR "Usage: $0 [-v] [-Z serverID] [-D rootdn] { -w password | -w - | -j filename } \n");
    print(STDERR "        -n instance [-t attributeName[:indextypes[:matchingrules]]]\n");
    print(STDERR " Opts: -D rootdn           - Directory Manager\n");
    print(STDERR "     : -w password         - Directory Manager's password\n");
    print(STDERR "     : -w -                - Prompt for Directory Manager's password\n");
    print(STDERR "     : -j filename         - Read Directory Manager's password from file\n");
    print(STDERR "     : -Z serverID         - Name of the server instance\n");
    print(STDERR "     : -n backend name     - instance to be indexed\n");
    print(STDERR "     : -t attributeName[:indextypes[:matchingrules]]\n");
    print(STDERR "                           - attributeName: name of the attribute to be indexed\n");
    print(STDERR "                             If omitted, all the indexes defined \n");
    print(STDERR "                             for that instance are generated.\n");
    print(STDERR "                           - indextypes: comma separated index types\n");
    print(STDERR "                           - matchingrules: comma separated matrules\n");
    print(STDERR "                           Example: -t foo:eq,pres\n");
    print(STDERR "     : -T vlvAttributeName - vlvAttributeName: name of the vlv attribute to be indexed\n");
    print(STDERR "     : -v                  - verbose\n");
}

$opt_v = 0;
$instance = "";
$rootdn = "";
$passwd = "";
$passwdfile = "";
$attribute_arg = "";
$vlvattribute_arg = "";
$verbose = 0;
$host = "";
$port = "";

$ENV{'PATH'} = "@ldaptool_bindir@:/usr/bin:@ldaptool_bindir@:/usr/bin";

DSUtil::libpath_add("@nss_libdir@");
DSUtil::libpath_add("/usr/lib");
DSUtil::libpath_add("/usr/lib64");

$ENV{'SHLIB_PATH'} = "$ENV{'LD_LIBRARY_PATH'}";

usage() if (!getopts('n:D:w:T:t:j:Z:vh'));

if ($opt_j ne ""){
    die "Error, cannot open password file $opt_j\n" unless (open (RPASS, $opt_j));
    $opt_w = <RPASS>;
    chomp($opt_w);
    close(RPASS);
}

if( $opt_w eq "" || $#ARGV ge 0){
    usage();
    exit (1);
}
if( $opt_h ){
    usage();
    exit (0);
}

$instance = $opt_n;
$rootdn = $opt_D;
$passwd = $opt_w;
$attribute_arg = $opt_t;
$vlvattribute_arg = $opt_T;
$verbose = $opt_v;
$servid = $opt_Z;
$passwdfile = $opt_j;

$servid = DSUtil::get_server_id($servid, "@initconfigdir@");
@info = DSUtil::get_missing_info("@instconfigdir@", $servid, $host, $port, $rootdn);
$passwd = DSUtil::get_password_from_file($passwd, $passwdfile);

if ( $info[2] eq "" || $passwd eq "" ) 
{ 
    &usage; 
}

$vstr = "";
if ($verbose != 0) 
{ 
    $vstr = "-v"; 
}

($s, $m, $h, $dy, $mn, $yr, $wdy, $ydy, $r) = localtime(time);
$mn++; $yr += 1900;
$taskname = "db2index_${yr}_${mn}_${dy}_${h}_${m}_${s}";

if ( $instance eq "" )
{
    &usage;
}

# No attribute name has been specified: let's get them from the configuration
$attribute="";
$indexes_list="";
$vlvattribute="";
$vlvindexes_list="";
chdir("/usr/bin");
if ( $attribute_arg eq "" && $vlvattribute_arg eq "" )
{
    # Get the list of indexes from the entry
    $indexes_list="ldapsearch @ldaptool_opts@ $vstr -h $info[0] -p $info[1] -D \"$info[2]\" -w \"$passwd\" -s one " .
    "-b \"cn=index,cn=\"$instance\", cn=ldbm database,cn=plugins,cn=config\" \"(&(objectclass=*)(nsSystemIndex=false))\" cn";
    # build the values of the attribute nsIndexAttribute
    open(LDAP1, "$indexes_list |");
    while (<LDAP1>) {
        s/\n //g;
        if (/^cn: (.*)\n/) {
            $IndexAttribute="nsIndexAttribute";
            $attribute="$attribute$IndexAttribute: $1\n";
        }
    }
    close(LDAP1);
    if ( $attribute eq "" )
    {
        # No attribute to index, just exit
        exit(0);
    }

    # Get the list of indexes from the entry
    $vlvindexes_list="ldapsearch @ldaptool_opts@ $vstr -h $info[0] -p $info[1] -D \"$info[2]\" -w \"$passwd\" -s sub -b \"cn=\"$instance\", cn=ldbm database,cn=plugins,cn=config\" \"objectclass=vlvIndex\" cn";

    # build the values of the attribute nsIndexVlvAttribute
    open(LDAP1, "$vlvindexes_list |");
    while (<LDAP1>) {
        s/\n //g;
        if (/^cn: (.*)\n/) {
            $vlvIndexAttribute="nsIndexVlvAttribute";
            $vlvattribute="$vlvattribute$vlvIndexAttribute: $1\n";
        }
    }
    close(LDAP1);
}
else
{
    if ( $attribute_arg ne "" )
    {
        $attribute="nsIndexAttribute: $attribute_arg\n";
    }
    if ( $vlvattribute_arg ne "" )
    {
        $vlvattribute="nsIndexVlvAttribute: $vlvattribute_arg\n";
    }
}

# Build the task entry to add

$dn = "dn: cn=$taskname, cn=index, cn=tasks, cn=config\n";
$misc = "objectclass: top\nobjectclass: extensibleObject\n";
$cn =  "cn: $taskname\n";
$nsinstance = "nsInstance: ${instance}\n";

$entry = "${dn}${misc}${cn}${nsinstance}${attribute}${vlvattribute}";
open(FOO, "| ldapmodify @ldaptool_opts@ $vstr -h $info[0] -p $info[1] -D \"$info[2]\" -w \"$passwd\" -a" );
print(FOO "$entry");
close(FOO);
